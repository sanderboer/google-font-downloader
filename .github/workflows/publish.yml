name: Publish to PyPI

on:
  push:
    tags:
      - "v*"
    branches:
      - main
    paths:
      - "pyproject.toml"
  workflow_dispatch:

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install build tools
        run: pip install build

      - name: Install package (dev extras)
        run: pip install -e .[dev]

      - name: Lint
        run: ruff check .

      - name: Test
        run: pytest -q

      - name: Detect version change in pyproject
        id: version
        shell: bash
        run: |
          NEW_VER=$(python -c "import tomllib;print(tomllib.load(open('pyproject.toml','rb')).get('project',{}).get('version',''))")
          echo "new=$NEW_VER" >> $GITHUB_OUTPUT
          if git rev-parse HEAD^ >/dev/null 2>&1; then
            if git show HEAD^:pyproject.toml >/dev/null 2>&1; then
              OLD_VER=$(git show HEAD^:pyproject.toml | python -c "import sys,tomllib;print(tomllib.loads(sys.stdin.read()).get('project',{}).get('version',''))")
              echo "old=$OLD_VER" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Build sdist and wheel
        run: python -m build

      - name: Publish to PyPI (tag)
        if: startsWith(github.ref, 'refs/tags/v')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Publish to PyPI (version bump on main)
        if: github.ref == 'refs/heads/main' && steps.version.outputs.new != '' && steps.version.outputs.new != steps.version.outputs.old
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
